<UserControl x:Class="ImLazy.ControlPanel.Views.SelectRuleView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:views="clr-namespace:ImLazy.ControlPanel.Views"
             xmlns:viewModel="clr-namespace:ImLazy.ControlPanel.ViewModel"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             DataContext="{Binding Main, Source={StaticResource Locator}}">
    <UserControl.Resources>
        <DataTemplate x:Key="RuleItemTempalte" DataType="viewModel:RuleViewModel">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding Name}"/>
                </StackPanel>
                <Button Content="..." HorizontalAlignment="Left" Width="15" Grid.Column="1" Style="{StaticResource SimbolButtonStyle}" Click="OnSelectButtonClicked" />
                <!--
                    It's a little tricky here. The "MouseDoubleClick" event can only be triggered when the InvokeCommandAction
                    is attached to a Control (Grid is not a Control). So I used a ContentControl here to act
                    as a container for InvokeCommandAction.
                    -->
                <ContentControl Grid.Column="0" Content="" MouseDoubleClick="OnItemDoubleClicked"/>
            </Grid>
        </DataTemplate>
    </UserControl.Resources>
    <Grid Grid.Row="0">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
        <ListBox
			x:Name="LstRules" 
			ItemsSource="{Binding Rules}"
            Margin="{StaticResource DefaultMargin}"
			ItemTemplate="{StaticResource RuleItemTempalte}" 
			HorizontalContentAlignment="Stretch" />
        <StackPanel Grid.Row="1" Margin="{StaticResource DefaultMargin}">
            <Button 
			    Margin="0,10,0,0"
			    Content="Remove" 
			    HorizontalAlignment="Stretch"
                DataContext="{Binding Main, Source={StaticResource Locator}}"
			    Command="{Binding DeleteRuleCommand}"/>
        </StackPanel>
        
    </Grid>
</UserControl>
